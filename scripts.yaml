setup:
  - dart pub get --precompile

build_runner:
  (aliases): br
  build:
    (aliases): b
    (command): dart pub run build_runner build --delete-conflicting-outputs

  watch:
    (aliases): w
    (command): dart pub run build_runner watch --delete-conflicting-outputs

_packages:
  - autoequal
  - autoequal_gen

format: cd {$_packages} && dart format .
analyze: cd {$_packages} && dart analyze .

test:
  gen: cd autoequal_gen && sip test
  e2e: cd e2e_project && sip test

publish:
  (bail):
  (command):
    - "{$test:gen} --bail"
    - "{$test:e2e} --bail"
    - "{$format}"
    - "{$analyze}"
    - |
      # Update pubspec versions
      DIR=autoequal_gen
      {$publish:pubspec}

      DIR=autoequal
      {$publish:pubspec}

    - |
      # Publishing to pub.dev
      DIR=autoequal_gen
      {$publish:_to-pub}

      DIR=autoequal
      {$publish:_to-pub}

    - "{$publish:_commit}"
    - |
      # Tagging and pushing to origin
      DIR=autoequal_gen
      {$publish:tag}

      DIR=autoequal
      {$publish:tag}

    - "{$publish:_push}"
  _to-pub: |
    if [ ! -f $DIR/needs_publishing.txt ]; then
        exit 0
    fi

    rm $DIR/needs_publishing.txt

    echo "Publishing $DIR"
    cd $DIR && dart pub publish
  _version: |
    # get version from changelog
    version=$(grep -m 1 "# " $DIR/CHANGELOG.md | awk '{print $2}')

  pubspec: |
    {$publish:_version}

    PUBSPEC_VERSION=$(grep -m 1 "version: " $DIR/pubspec.yaml | awk '{print $2}')

    if [ "$version" = "$PUBSPEC_VERSION" ]; then
      echo "Version $version is already published"
      exit 0
    fi

    sed -i '' "s/version: .*/version: $version/" $DIR/pubspec.yaml
    touch $DIR/needs_publishing.txt

  tag: |
    {$publish:_version}

    echo "Tagging version $version"
    git tag -a "v$version" -m "v$version" || exit 0

  _commit: |
    git add .
    git commit -m "bump version" || exit 0

  _push: |
    echo "Pushing to origin"
    git push
    git push --tags
